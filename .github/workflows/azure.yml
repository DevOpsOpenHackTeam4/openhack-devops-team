# This workflow will build and push a node.js application to an Azure Web App when a release is created.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/azure/app-service/app-service-plan-manage#create-an-app-service-plan
#
# To configure this workflow:
#
# 1. Set up a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE with the value of your Azure publish profile.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 2. Change the values for the AZURE_WEBAPP_NAME, AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables  (below).
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
name: userprofile CI/CD

on:
  push:
    branches: [ master ]
    paths: 
    - 'apis/userprofile/**'
  pull_request:
    branches: [ master ]
    paths:
    - 'apis/userprofile/**' 

env:
  #AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '8.x'                # set this to the node version to use

jobs:
  build-and-deploy:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: npm install, build, and test
      working-directory: 'apis/userprofile'
      run: |
        # Build and test the project, then
        # deploy to Azure Web App.
        npm install
        npm run build --if-present
        npm run test --if-present
  
  deploy:
    needs: build-and-deploy
    if: ${{ success() && github.event_name != 'pull_request' }}
    name: Deploy to Azure
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Run docker
      working-directory: 'apis/userprofile'
      run: |
        docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsoh/api-userprofile:${{ github.run_number }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsoh/api-userprofile:${{ github.run_number }}
    - uses: azure/webapps-deploy@v2
      with:
        app-name: 'openhackvqp9t502userprofile'
        images: ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsoh/api-userprofile:${{ github.run_number }}
        slot-name: 'staging'

    - name: Check the deployed service URL
      uses: jtalk/url-health-check-action@v1.2
      with:
        # Check the following URLs one by one sequentially
        url: https://openhackvqp9t502userprofile-staging.azurewebsites.net/api/healthcheck/user
        # Follow redirects, or just report success on 3xx status codes
        follow-redirect: no # Optional, defaults to "no"
        # Fail this action after this many failed attempts
        max-attempts: 3 # Optional, defaults to 1
        # Delay between retries
        retry-delay: 5s # Optional, only applicable to max-attempts > 1:              

    - name: Azure CLI script
      if: ${{ success() }}
      uses: azure/CLI@v1
      with:
        azcliversion: 2.0.72
        inlineScript: |
          az webapp deployment slot swap  -g openhackvqp9t502rg -n openhackvqp9t502userprofile --slot staging \
          --target-slot production           
